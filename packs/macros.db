{"name":"Shooting","permission":{"default":0,"pnH8R8EJ8P3qXXC5":3},"type":"script","flags":{},"scope":"global","command":"//Uses the selected actor to figure out guns\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet shootingSkill = selected.items.find((el) => el.data.name == \"Shooting\");\r\nif (shootingSkill == undefined) {\r\n  ui.notifications.warn(\"This Actor does not have the Shooting skill\");\r\n}\r\n\r\n//Ignores melee/wepons that don't have the 'shots' property\r\nlet weapons = selected.items.filter(\r\n  (el) => el.type == \"weapon\" && el.data.data.shots > 0\r\n);\r\n\r\n//SWADE rules for how much ammo is expended per RoF\r\nconst rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\r\n\r\n//Dialog Creater that asks for any modifiers and what gun to use\r\ngetFiringSolution();\r\n\r\n//Utility function for printing things to chat\r\nfunction printMessage(message) {\r\n  ChatMessage.create(\r\n    {\r\n      speaker: {\r\n        actor: selected,\r\n        alias: selected.name,\r\n      },\r\n      content: message,\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n//Someone please teach me how to make pretty HTML templates because I can't CSS if my life depended on it\r\nfunction getFiringSolution() {\r\n  let weaponsList = getWeaponsListAsDropdown();\r\n\r\n  let template = `\r\n    <div>\r\n      <div class=\"form-group\">\r\n        <label>Select Weapon</label>\r\n        <select id=\"selectedRangedWeapon\">\r\n        ${weaponsList}\r\n        </select></div>\r\n        <label for=\"targetCover\">Target Cover</label>\r\n        <select id=\"targetCover\">\r\n          <option value=0>No Cover</option>\r\n          <option value=-2>Light</option>\r\n          <option value=-4>Medium</option>\r\n          <option value=-6>Heavy</option>\r\n          <option value=-8>Complete</option>\r\n        </select>\r\n        <label for=\"rangePenalty\">Range Penalty</label>\r\n        <select id=\"rangePenalty\">\r\n          <option value=0>Short Range</option>\r\n          <option value=-2>Medium</option>\r\n          <option value=-4>Long</option>\r\n          <option value=-8>Extreme</option>\r\n        </select>\r\n        <div> \r\n          <label for=\"selectedRoF\">Selected RoF </label>\r\n          <input type=\"number\" id=\"selectedRoF\" style=\"width:50px;\" value=1>\r\n          <br />\r\n          <label for=\"recoilPenalty\">Recoil Penalty</label>\r\n          <input type=\"number\" id=\"recoilPenalty\" style=\"width:50px;\" value=0>\r\n          <br />\r\n          <label for=\"mapPenalty\">Multi Action Penalty </label>\r\n          <input type=\"number\" id=\"mapPenalty\" style=\"width:50px;\" value=0>\r\n          <br />\r\n          <label for=\"otherMod\">Other Shooting Mods</label>\r\n          <input type=\"number\" id=\"otherMod\" style=\"width:50px;\" value=0>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Ranged Attack\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Fire Weapon\",\r\n        callback: async (html) => {\r\n          fireWeapon(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n    default: \"ok\",\r\n  }).render(true);\r\n}\r\n\r\n//utility function that that creates a dropdown of all weapons\r\nfunction getWeaponsListAsDropdown() {\r\n  let template = ``;\r\n  weapons.forEach((wep) => {\r\n    template += `<option value=\"${wep.name}\">${wep.name} | ROF ${wep.data.data.rof} | Shots ${wep.data.data.shots} </option>`;\r\n    //console.log(template);\r\n  });\r\n\r\n  return template;\r\n}\r\n\r\n//Computes the rolls, total modifier, and takes care of ammo\r\nfunction fireWeapon(html) {\r\n  let weapon = weapons.find(\r\n    (el) => el.name == html.find(\"#selectedRangedWeapon\")[0].value\r\n  );\r\n\r\n  //swade pg93\r\n  let numShootingDie = html.find(\"#selectedRoF\")[0].value;\r\n\r\n  //check if enough Ammo in clip to fire AND if RoF < weapon's RoF\r\n  if (numShootingDie > weapon.data.data.rof || numShootingDie < 1) {\r\n    ui.notifications.warn(\"Selected RoF beyond Weapon RoF\");\r\n    return;\r\n  }\r\n  if (rofAmmo[numShootingDie] > weapon.data.data.shots) {\r\n    ui.notifications.warn(\r\n      `Not enough Ammo to fire at this RoF. You only have (${weapon.data.data.shots}) shots left`\r\n    );\r\n    return;\r\n  }\r\n\r\n  //let shootingSkill = selected.items.find((el) => el.data.name == \"Shooting\");\r\n  //console.log(shootingSkill);\r\n  //individually rolls each die and explodes it. as per swade rules, each die is a seperate attack\r\n  let shootingRolls = [];\r\n  for (let i = 0; i < numShootingDie; i++) {\r\n    let newRoll = new Die(shootingSkill.data.data.die.sides).roll(1);\r\n    //console.log(`Shooting Roll (${i}): `, newRoll.total);\r\n    newRoll = newRoll.explode([shootingSkill.data.data.die.sides]).total;\r\n    //console.log(`Shooting Roll (${i}) After Explosions: `, newRoll);\r\n    shootingRolls.push(newRoll);\r\n  }\r\n\r\n  //will roll wild die for all attacks but only shows it if selected actor is a WildCard\r\n  let wilddieRoll = new Die(shootingSkill.data.data[\"wild-die\"].sides)\r\n    .roll(1)\r\n    .explode([shootingSkill.data.data[\"wild-die\"].sides]).total;\r\n\r\n  //console.log(\"Shooting Rolls Before Mod: \", shootingRolls);\r\n  //console.log(\"Wild Die Roll Before Mod: \", wilddieRoll);\r\n\r\n  //Build the Modifiers\r\n  // Base Shooting Skill Mod\r\n  let shootingSkillMod = isNaN(parseInt(shootingSkill.data.data.die.modifier))\r\n    ? 0\r\n    : parseInt(shootingSkill.data.data.die.modifier);\r\n  let coverMod = parseInt(html.find(\"#targetCover\")[0].value);\r\n  let recoilMod = parseInt(html.find(\"#recoilPenalty\")[0].value);\r\n  let multiActionMod = parseInt(html.find(\"#mapPenalty\")[0].value);\r\n  let rangeMod = parseInt(html.find(\"#rangePenalty\")[0].value);\r\n  let otherMod = parseInt(html.find(\"#otherMod\")[0].value);\r\n\r\n  let distractedMod = selected.data.data.status.isDistracted ? -2 : 0;\r\n  let woundMod =\r\n    (selected.data.data.wounds.value - selected.data.data.wounds.ignored) * -1;\r\n  if (woundMod < -3) {\r\n    woundMod = -3;\r\n  } //swade pg95\r\n\r\n  let totalMod =\r\n    shootingSkillMod +\r\n    coverMod +\r\n    recoilMod +\r\n    multiActionMod +\r\n    rangeMod +\r\n    otherMod +\r\n    distractedMod +\r\n    woundMod;\r\n  //console.log(\"Total Mod: \", totalMod);\r\n\r\n  //go over each roll and add the totalmod to it\r\n\r\n  let shootingResults = shootingRolls.map((roll) => {\r\n    return (roll += totalMod);\r\n  });\r\n  let wilddieResult = wilddieRoll + totalMod;\r\n\r\n  //console.log(\"Shooting Rolls: \", shootingRolls);\r\n  //console.log(\"Wild Die Roll: \", wilddieRoll);\r\n\r\n  //Spend the Bullets\r\n  //selected.items.get(weapon.key).data.data.shots -= rofAmmo[numShootingDie]\r\n  let newShots = (weapon.data.data.shots -= rofAmmo[numShootingDie]);\r\n  weapon.update({ \"data.shots\": newShots });\r\n\r\n  let resultsWithWildDie = shootingResults.concat(wilddieResult);\r\n\r\n  resultsWithWildDie.splice(\r\n    resultsWithWildDie.indexOf(Math.min(...resultsWithWildDie)),\r\n    1\r\n  );\r\n\r\n  let chatTemplate = `\r\n    <p>Weapon: ${weapon.data.name}</p>\r\n    <p>Notes: ${weapon.data.data.notes}</p>\r\n    <p>Shots Left: ${weapon.data.data.shots}</p>\r\n    <p></p>\r\n    <p>\r\n      Shooting Rolls: [${shootingRolls}] \r\n      ${selected.data.data.wildcard ? ` | Wild Die Roll: ${wilddieRoll}` : \"\"}\r\n    </p>\r\n    <p>Total Modifier: ${totalMod}</p>\r\n    <p></p>\r\n    <p>\r\n      Results: <b>${\r\n        selected.data.data.wildcard ? resultsWithWildDie : shootingResults\r\n      }</b>\r\n    </p>\r\n  `;\r\n  printMessage(chatTemplate);\r\n}\r\n","author":"pnH8R8EJ8P3qXXC5","img":"icons/svg/target.svg","actorIds":[],"_id":"0Fva2UksOAha7bMu"}
{"name":"Damage","permission":{"default":0,"pnH8R8EJ8P3qXXC5":3},"type":"script","flags":{},"scope":"global","command":"//Get Selected Actor\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\n//Get Target Actor\r\nif (Array.from(game.user.targets).length != 1) {\r\n  ui.notifications.warn(\"Please select a SINGLE target\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet target = Array.from(game.user.targets)[0].actor;\r\n\r\nlet selectedWeaponsList = selected.items.filter(\r\n  (el) => el.data.type == \"weapon\" && el.data.data.equipped\r\n);\r\n//weapons dmg roll:\r\n//let roll = new Roll(itemData.damage, actor.getRollShortcuts()).roll();\r\n\r\nlet targetArmors = target.items.filter(\r\n  (el) => el.data.data.equipped && el.data.type == \"armor\"\r\n);\r\nlet targetToughenss = target.data.data.stats.toughness; //{toughness =\"\", armor: #, mod: #}\r\nrollDamage();\r\nfunction rollDamage() {\r\n  let template = `\r\n  <div>\r\n    <p><b>Selected Token Information</b></p>\r\n    <div class = \"form-group\">\r\n    <label>Select Weapon</label>\r\n    <select id=\"selectedWeapon\">\r\n    ${getWeaponsList()}\r\n    </select>\r\n    <p></p>\r\n    <p><b>Target Information</b></p>\r\n    <p>Base Toughness: ${targetToughenss.value} | Armor: ${\r\n    targetToughenss.armor\r\n  } | Other Mods: ${targetToughenss.modifier}</p>\r\n    <p>Armor Notes: </p>\r\n    ${getTargetArmorNotes()}\r\n    <p></p>\r\n    <p><b>Other Modifiers</b></p>\r\n    \r\n    <p>\r\n    <label>Has the Drop?</label>\r\n    <input type=\"checkbox\" id=\"hasDrop\"></input>\r\n    <label>Roll Bonus Damage?</label>\r\n    <input type=\"checkbox\" id=\"bonusDmg\"></input>\r\n    </p>\r\n\r\n    <p>\r\n    <label> Other Damage Mod </label>\r\n    <input type=\"number\" id=\"dmgMod\" value=0 style=\"width:50px\"></input>\r\n    </p>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Damage Roll\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Roll Damage\",\r\n        callback: async (html) => {\r\n          applyDamage(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction getWeaponsList() {\r\n  let template = ``;\r\n  selectedWeaponsList.forEach((wep) => {\r\n    template += `<option value=\"${wep.name}\">${wep.name} | AP ${wep.data.data.ap} | DMG: ${wep.data.data.damage}</option>`;\r\n  });\r\n\r\n  return template;\r\n}\r\nfunction getTargetArmorNotes() {\r\n  let template = ``;\r\n  targetArmors.forEach((armor) => {\r\n    template += `<p>${armor.name} | ${armor.data.data.notes}</p>`;\r\n  });\r\n  return template;\r\n}\r\nfunction applyDamage(html) {\r\n  let selectedWeapon = selectedWeaponsList.find(\r\n    (el) => el.name == html.find(\"#selectedWeapon\")[0].value\r\n  );\r\n\r\n  let rollString = selectedWeapon.data.data.damage + \"x= \";\r\n  rollString += html.find(\"#bonusDmg\")[0].checked ? \" + 1d6x= \" : \"\";\r\n\r\n  let dmgRoll = new Roll(rollString, actor.getRollShortcuts()).roll().total;\r\n  let dmgMod =\r\n    parseInt(html.find(\"#dmgMod\")[0].value) + html.find(\"#hasDrop\")[0].checked\r\n      ? 4\r\n      : 0;\r\n\r\n  let armorAfterAP = targetToughenss.armor - selectedWeapon.data.data.ap;\r\n  armorAfterAP = armorAfterAp < 0 ? 0 : armorAfterAP;\r\n\r\n  let tough =\r\n    parseInt(targetToughenss.value) + armorAfterAP + targetToughenss.modifier;\r\n\r\n  let result = `\r\n  <p>Weapon: ${selectedWeapon.name} | AP ${selectedWeapon.data.data.ap}</p>\r\n  <p>Damage Roll: ${dmgRoll} | Mod: ${dmgMod} | Total: ${dmgRoll + dmgMod}</p>\r\n  <p>Target Toughness After AP: ${tough}</p>\r\n  <p></p>\r\n  <p>Damage dealt: <b>${dmgRoll + dmgMod - tough}</b></p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: result,\r\n  });\r\n}\r\n","author":"pnH8R8EJ8P3qXXC5","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"xbBrIsXO1wDzP0r5"}
