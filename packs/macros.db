{"name":"Shooting","permission":{"default":0,"0C9jPih3GeGdqXXQ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Uses the selected actor to figure out guns\r\nlet selected = canvas.tokens.controlled[0].actor\r\n\r\n//Ignores melee/wepons that don't have the 'shots' property\r\nlet weapons = selected.items.filter(el => el.type == \"weapon\" && el.data.data.shots > 0)\r\n\r\n//SWADE rules for how much ammo is expended per RoF\r\nconst rofAmmo = {1:1, 2:5, 3:10, 4:20, 5:40, 6:50}\r\n\r\n//Dialog Creater that asks for any modifiers and what gun to use\r\ngetFiringSolution()\r\n\r\n//Utility function for printing things to chat\r\nfunction printMessage(message){\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name\r\n    },\r\n    content: message\r\n  }, {})\r\n}\r\n\r\n\r\n//Someone please teach me how to make pretty HTML templates because I can't CSS if my life depended on it\r\nfunction getFiringSolution(){\r\n  let weaponsList = getWeaponsListAsDropdown()\r\n\r\n  let template = `\r\n    <div>\r\n      <div class=\"form-group\">\r\n        <label>Select Weapon</label>\r\n        <select id=\"selectedRangedWeapon\">\r\n        ${weaponsList}\r\n        </select></div>\r\n        <label for=\"targetCover\">Target Cover</label>\r\n        <select id=\"targetCover\">\r\n          <option value=0>No Cover</option>\r\n          <option value=-2>Light</option>\r\n          <option value=-4>Medium</option>\r\n          <option value=-6>Heavy</option>\r\n          <option value=-8>Complete</option>\r\n        </select>\r\n        <label for=\"rangePenalty\">Range Penalty</label>\r\n        <select id=\"rangePenalty\">\r\n          <option value=0>Short Range</option>\r\n          <option value=-2>Medium</option>\r\n          <option value=-4>Long</option>\r\n          <option value=-8>Extreme</option>\r\n        </select>\r\n        <div> \r\n          <label for=\"selectedRoF\">Selected RoF </label>\r\n          <input type=\"number\" id=\"selectedRoF\" style=\"width:50px;\" value=1>\r\n          <br />\r\n          <label for=\"recoilPenalty\">Recoil Penalty</label>\r\n          <input type=\"number\" id=\"recoilPenalty\" style=\"width:50px;\" value=0>\r\n          <br />\r\n          <label for=\"mapPenalty\">Multi Action Penalty </label>\r\n          <input type=\"number\" id=\"mapPenalty\" style=\"width:50px;\" value=0>\r\n          <br />\r\n          <label for=\"otherMod\">Other Shooting Mods</label>\r\n          <input type=\"number\" id=\"otherMod\" style=\"width:50px;\" value=0>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `\r\n\r\n  new Dialog({\r\n    title: \"Ranged Attack\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Fire Weapon\",\r\n        callback: async (html) => {\r\n          fireWeapon(html)\r\n        },        \r\n      },\r\n      cancel: {\r\n        label: \"Cancel\"\r\n      }\r\n    },\r\n    default: \"ok\"\r\n  }).render(true);\r\n\r\n}\r\n\r\n//utility function that that creates a dropdown of all weapons\r\nfunction getWeaponsListAsDropdown(){\r\n  let template = ``\r\n  weapons.forEach( (wep) => {\r\n    template += `<option value=\"${wep.name}\">${wep.name} | ROF ${wep.data.data.rof} | Shots ${wep.data.data.shots} </option>`\r\n    console.log(template)\r\n  })\r\n\r\n  return template\r\n}\r\n\r\n//Computes the rolls, total modifier, and takes care of ammo\r\nfunction fireWeapon(html){\r\n  let weapon = weapons.find(el => el.name == html.find(\"#selectedRangedWeapon\")[0].value)\r\n  //swade pg93\r\n  let numShootingDie = html.find(\"#selectedRoF\")[0].value\r\n\r\n  //check if enough Ammo in clip to fire AND if RoF < weapon's RoF\r\n  if(numShootingDie > weapon.data.data.rof || numShootingDie < 1){\r\n    printMessage(\"Selected RoF beyond Weapon RoF\");\r\n    return;\r\n  }\r\n  if(rofAmmo[numShootingDie] > weapon.data.data.shots){\r\n    printMessage(`Not enough Ammo to fire at this RoF. You only have (${weapon.data.data.shots}) shots left`)\r\n    return;\r\n  }\r\n\r\n  let shootingSkill = selected.items.find(el => el.name == \"Shooting\").data.data\r\n\r\n  //individually rolls each die and explodes it. as per swade rules, each die is a seperate attack\r\n  let shootingRolls = []\r\n  for(let i=0; i<numShootingDie; i++){\r\n    let newRoll = new Die(shootingSkill.die.sides).roll(1)\r\n    console.log(`Shooting Roll (${i}): `, newRoll.total)\r\n    newRoll = newRoll.explode([shootingSkill.die.sides]).total\r\n    console.log(`Shooting Roll (${i}) After Explosions: `, newRoll)\r\n    shootingRolls.push(newRoll)\r\n  }\r\n\r\n  //will roll wild die for all attacks but only shows it if selected actor is a WildCard\r\n  let wilddieRoll = new Die(shootingSkill['wild-die'].sides).roll(1).explode([shootingSkill['wild-die'].sides]).total\r\n  \r\n  \r\n  console.log(\"Shooting Rolls Before Mod: \", shootingRolls);\r\n  console.log(\"Wild Die Roll Before Mod: \", wilddieRoll);\r\n\r\n\r\n  //Build the Modifiers\r\n  // Base Shooting Skill Mod\r\n  let shootingSkillMod = ( isNaN((parseInt(shootingSkill.die.modifier)) ) ? 0 : parseInt(shootingSkill.die.modifier) )\r\n  let coverMod = parseInt(html.find(\"#targetCover\")[0].value)\r\n  let recoilMod = parseInt(html.find(\"#recoilPenalty\")[0].value)\r\n  let multiActionMod = parseInt(html.find(\"#mapPenalty\")[0].value)\r\n  let rangeMod = parseInt(html.find(\"#rangePenalty\")[0].value)\r\n  let otherMod = parseInt(html.find(\"#otherMod\")[0].value)\r\n\r\n  let distractedMod = ( (selected.data.data.status.isDistracted) ? -2 : 0)\r\n  let woundMod = (selected.data.data.wounds.value - selected.data.data.wounds.ignored) * -1\r\n  if(woundMod < -3) { woundMod = -3} //swade pg95\r\n\r\n  let totalMod = shootingSkillMod + coverMod + recoilMod + multiActionMod + rangeMod + otherMod + distractedMod + woundMod;\r\n  console.log(\"Total Mod: \", totalMod)\r\n \r\n  //go over each roll and add the totalmod to it\r\n  shootingRolls.map( roll => {return roll += totalMod})\r\n  wilddieRoll += totalMod\r\n\r\n  console.log(\"Shooting Rolls: \", shootingRolls)\r\n  console.log(\"Wild Die Roll: \", wilddieRoll)\r\n\r\n  //Spend the Bullets\r\n  //selected.items.get(weapon.key).data.data.shots -= rofAmmo[numShootingDie]\r\n  selected.items.find(el => el.data.name == weapon.data.name).data.data.shots -= rofAmmo[numShootingDie]\r\n  \r\n  //Print the result\r\n  let weaponDataTemplate = `\r\n  Weapon: ${weapon.data.name}\r\n  Notes: ${weapon.data.data.notes}\r\n  Shots Left: ${weapon.data.data.shots}  \r\n  `\r\n  let weaponRollsTemplate = `\r\n  Total Modifier: ${totalMod}\r\n  Shooting Rolls: [${shootingRolls}]\r\n  `\r\n  if(selected.data.data.wildcard){\r\n    weaponRollsTemplate += `\r\n    Wild Die Roll: ${wilddieRoll}\r\n    `\r\n  }\r\n\r\n  printMessage(weaponDataTemplate+weaponRollsTemplate);\r\n\r\n}","author":"0C9jPih3GeGdqXXQ","img":"icons/svg/target.svg","actorIds":[],"_id":"8yoZT1RP2z1Uwpwi"}
