{"name":"Shooting","permission":{"default":0,"0C9jPih3GeGdqXXQ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Uses the selected actor to figure out guns\nif(canvas.tokens.controlled.length != 1){\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\n} \nlet selected = canvas.tokens.controlled[0].actor;\n\n\n//Ignores melee/wepons that don't have the 'shots' property\nlet weapons = selected.items.filter(\n  (el) => el.type == \"weapon\" && el.data.data.shots > 0\n);\n\n//SWADE rules for how much ammo is expended per RoF\nconst rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\n\n//Dialog Creater that asks for any modifiers and what gun to use\ngetFiringSolution();\n\n//Utility function for printing things to chat\nfunction printMessage(message) {\n  ChatMessage.create(\n    {\n      speaker: {\n        actor: selected,\n        alias: selected.name,\n      },\n      content: message,\n    },\n    {}\n  );\n}\n\n//Someone please teach me how to make pretty HTML templates because I can't CSS if my life depended on it\nfunction getFiringSolution() {\n  let weaponsList = getWeaponsListAsDropdown();\n\n  let template = `\n    <div>\n      <div class=\"form-group\">\n        <label>Select Weapon</label>\n        <select id=\"selectedRangedWeapon\">\n        ${weaponsList}\n        </select></div>\n        <label for=\"targetCover\">Target Cover</label>\n        <select id=\"targetCover\">\n          <option value=0>No Cover</option>\n          <option value=-2>Light</option>\n          <option value=-4>Medium</option>\n          <option value=-6>Heavy</option>\n          <option value=-8>Complete</option>\n        </select>\n        <label for=\"rangePenalty\">Range Penalty</label>\n        <select id=\"rangePenalty\">\n          <option value=0>Short Range</option>\n          <option value=-2>Medium</option>\n          <option value=-4>Long</option>\n          <option value=-8>Extreme</option>\n        </select>\n        <div> \n          <label for=\"selectedRoF\">Selected RoF </label>\n          <input type=\"number\" id=\"selectedRoF\" style=\"width:50px;\" value=1>\n          <br />\n          <label for=\"recoilPenalty\">Recoil Penalty</label>\n          <input type=\"number\" id=\"recoilPenalty\" style=\"width:50px;\" value=0>\n          <br />\n          <label for=\"mapPenalty\">Multi Action Penalty </label>\n          <input type=\"number\" id=\"mapPenalty\" style=\"width:50px;\" value=0>\n          <br />\n          <label for=\"otherMod\">Other Shooting Mods</label>\n          <input type=\"number\" id=\"otherMod\" style=\"width:50px;\" value=0>\n        </div>\n      </div>\n    </div>\n  `;\n\n  new Dialog({\n    title: \"Ranged Attack\",\n    content: template,\n    buttons: {\n      ok: {\n        label: \"Fire Weapon\",\n        callback: async (html) => {\n          fireWeapon(html);\n        },\n      },\n      cancel: {\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\n//utility function that that creates a dropdown of all weapons\nfunction getWeaponsListAsDropdown() {\n  let template = ``;\n  weapons.forEach((wep) => {\n    template += `<option value=\"${wep.name}\">${wep.name} | ROF ${wep.data.data.rof} | Shots ${wep.data.data.shots} </option>`;\n    console.log(template);\n  });\n\n  return template;\n}\n\n//Computes the rolls, total modifier, and takes care of ammo\nfunction fireWeapon(html) {\n  let weapon = weapons.find(\n    (el) => el.name == html.find(\"#selectedRangedWeapon\")[0].value\n  );\n\n  //swade pg93\n  let numShootingDie = html.find(\"#selectedRoF\")[0].value;\n\n  //check if enough Ammo in clip to fire AND if RoF < weapon's RoF\n  if (numShootingDie > weapon.data.data.rof || numShootingDie < 1) {\n    ui.notifications.warn(\"Selected RoF beyond Weapon RoF\");\n    return;\n  }\n  if (rofAmmo[numShootingDie] > weapon.data.data.shots) {\n    ui.notifications.warn(`Not enough Ammo to fire at this RoF. You only have (${weapon.data.data.shots}) shots left`);\n    return;\n  }\n\n  let shootingSkill = selected.items.find((el) => el.data.name == \"Shooting\");\n  console.log(shootingSkill);\n  //individually rolls each die and explodes it. as per swade rules, each die is a seperate attack\n  let shootingRolls = [];\n  for (let i = 0; i < numShootingDie; i++) {\n    let newRoll = new Die(shootingSkill.data.data.die.sides).roll(1);\n    console.log(`Shooting Roll (${i}): `, newRoll.total);\n    newRoll = newRoll.explode([shootingSkill.data.data.die.sides]).total;\n    console.log(`Shooting Roll (${i}) After Explosions: `, newRoll);\n    shootingRolls.push(newRoll);\n  }\n\n  //will roll wild die for all attacks but only shows it if selected actor is a WildCard\n  let wilddieRoll = new Die(shootingSkill.data.data[\"wild-die\"].sides)\n    .roll(1)\n    .explode([shootingSkill.data.data[\"wild-die\"].sides]).total;\n\n  console.log(\"Shooting Rolls Before Mod: \", shootingRolls);\n  console.log(\"Wild Die Roll Before Mod: \", wilddieRoll);\n\n  //Build the Modifiers\n  // Base Shooting Skill Mod\n  let shootingSkillMod = isNaN(parseInt(shootingSkill.data.data.die.modifier))\n    ? 0\n    : parseInt(shootingSkill.data.data.die.modifier);\n  let coverMod = parseInt(html.find(\"#targetCover\")[0].value);\n  let recoilMod = parseInt(html.find(\"#recoilPenalty\")[0].value);\n  let multiActionMod = parseInt(html.find(\"#mapPenalty\")[0].value);\n  let rangeMod = parseInt(html.find(\"#rangePenalty\")[0].value);\n  let otherMod = parseInt(html.find(\"#otherMod\")[0].value);\n\n  let distractedMod = selected.data.data.status.isDistracted ? -2 : 0;\n  let woundMod =\n    (selected.data.data.wounds.value - selected.data.data.wounds.ignored) * -1;\n  if (woundMod < -3) {\n    woundMod = -3;\n  } //swade pg95\n\n  let totalMod =\n    shootingSkillMod +\n    coverMod +\n    recoilMod +\n    multiActionMod +\n    rangeMod +\n    otherMod +\n    distractedMod +\n    woundMod;\n  console.log(\"Total Mod: \", totalMod);\n\n  //go over each roll and add the totalmod to it\n  shootingRolls.map((roll) => {\n    return (roll += totalMod);\n  });\n  wilddieRoll += totalMod;\n\n  console.log(\"Shooting Rolls: \", shootingRolls);\n  console.log(\"Wild Die Roll: \", wilddieRoll);\n\n  //Spend the Bullets\n  //selected.items.get(weapon.key).data.data.shots -= rofAmmo[numShootingDie]\n  let newShots = weapon.data.data.shots -= rofAmmo[numShootingDie]\n  weapon.update({'data.shots':  newShots});\n\n  let chatTemplate = `\n    <p>Weapon: ${weapon.data.name}</p>\n    <p>Notes: ${weapon.data.data.notes}</p>\n    <p>Shots Left: ${weapon.data.data.shots}</p>\n    <p>Total Modifier: ${totalMod}</p>\n    <p></p>\n    <p> Mod Already Included in Results </p>\n    <p>Shooting Results: [${shootingRolls}]\n    ${(selected.data.data.wildcard) ? `<p>Wild Die Roll: ${wilddieRoll}</p>` : \"\"}\n  `\n  printMessage(chatTemplate);\n}\n","author":"0C9jPih3GeGdqXXQ","img":"icons/svg/target.svg","actorIds":[],"_id":"8yoZT1RP2z1Uwpwi"}