{"name":"Fighting","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Fighting vs Parry\r\n// Take into account The Drop\r\n\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\nif (Array.from(game.user.targets).length != 1) {\r\n  ui.notifications.warn(\"Please select a SINGLE target\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet target = Array.from(game.user.targets)[0].actor;\r\n\r\nlet meleeWeaponsList = selected.items.filter(\r\n  (el) => el.data.type == \"weapon\" && el.data.data.damage.indexOf(\"@str\") >= 0\r\n);\r\n\r\nlet targetParry = target.data.data.stats.parry.value;\r\nlet targetShields = target.items.filter(\r\n  (el) => el.data.data.equipped && el.data.type == \"shield\"\r\n);\r\n\r\nlet targetParryMod = 0;\r\ntargetShields.map((el) => {\r\n  targetParryMod += parseInt(el.data.data.parry);\r\n});\r\n\r\ngetFightingSolution();\r\n\r\nfunction getFightingSolution() {\r\n  let template = `\r\n  <div class=\"form-group\">\r\n    <p>Target Parry ${targetParry} | Parry Bonus from Shield ${targetParryMod}</p>\r\n    <p></p>\r\n    <p> Has the Drop? <input type=\"checkbox\" id=\"theDrop\" unchecked /> </p>\r\n    <p> Unarmed Defender? <input type=\"checkbox\" id=\"unarmedDefender\" unchecked /> </p>\r\n    <label>Called Shot Mod</label>\r\n    <input type=\"number\" id=\"calledShot\" style=\"width:50px;\" value=0>\r\n    <label> Other Modifiers </label>\r\n    <input type=\"number\" id=\"otherMod\" style=\"width:50px;\" value=0>\r\n\r\n    </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Fighting Roll\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Roll Fighting\",\r\n        callback: async (html) => {\r\n          rollFighting(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction rollFighting(html) {\r\n  let fightSkill = selected.items.find((el) => el.name == \"Fighting\");\r\n  let rollFormula = \"\";\r\n  let modifier = \"\";\r\n\r\n  // Check if Skill Defined\r\n  // Check if Wildcard\r\n\r\n  if (fightSkill && fightSkill.data.data.die.modifier == \"\") {\r\n    modifier = \"+0\";\r\n  } else if (fightSkill && parseInt(fightSkill.data.data.die.modifier) >= 0) {\r\n    modifier = `+${parseInt(fightSkill.data.data.die.modifier)}`;\r\n  } else if (fightSkill) {\r\n    console.log(\"\");\r\n    modifier = parseInt(fightSkill.data.data.modifier).toString(); // - is baked into a negative\r\n  } else {\r\n    modifier = \"-2\"; //unskilled\r\n  }\r\n\r\n  let otherMods = 0;\r\n  otherMods += parseInt(html.find(\"#otherMod\")[0].value);\r\n  otherMods += parseInt(html.find(\"#calledShot\")[0].value);\r\n  otherMods += html.find(\"#unarmedDefender\")[0].checked ? 2 : 0;\r\n  otherMods += html.find(\"#theDrop\")[0].checked ? 4 : 0;\r\n  otherMods += selected.calcWoundFatigePenalties();\r\n  otherMods += selected.calcStatusPenalties();\r\n  let otherModifier = otherMods >= 0 ? `+${otherMods}` : parseInt(otherMods);\r\n\r\n  if (fightSkill && selected.data.data.wildcard) {\r\n    //WC with Fight Skill\r\n    //console.log(\"WC with Fight Skill\");\r\n    rollFormula = `{1d${fightSkill.data.data.die.sides}x=, 1d${fightSkill.data.data[\"wild-die\"].sides}x=}kh ${modifier} ${otherModifier}`;\r\n  } else if (selected.data.data.wildcard) {\r\n    rollFormula = `{1d4x=, 1d6x=}kh ${modifier} ${otherModifier}`;\r\n    //WC without Fight skill\r\n  } else if (fightSkill) {\r\n    //NPC with Fight Skill\r\n    //console.log(\"NPC with Fight Skill\");\r\n    rollFormula = `1d${fightSkill.data.data.die.sides}x= ${modifier} ${otherModifier}`;\r\n  } else {\r\n    //NPC without Fight Skill\r\n    //console.log(\"NPC \");\r\n    rollFormula = `1d4x= ${modifier} ${otherModifier}`;\r\n  }\r\n\r\n  let roll = new Roll(rollFormula).roll();\r\n  if (game.dice3d) {\r\n    game.dice3d.showForRoll(roll);\r\n  }\r\n\r\n  let numRaises = (roll.total - (targetParry + targetParryMod)) / 4;\r\n\r\n  let chatTemplate = `\r\n  <p> Fighting Skill: ${\r\n    fightSkill ? fightSkill.data.data.die.sides : \"Unskilled\"\r\n  } </p>\r\n  <p> Target Parry (Shield Bonus): ${targetParry}(${targetParryMod}) </p>\r\n  <p> Roll Formula: ${rollFormula} </p>\r\n  <p></p>\r\n  <p> Roll: ${roll.total} </p>\r\n  <p> <b>\r\n  ${numRaises >= 0 ? \"Success\" : \"Did Not Hit\"} \r\n  ${numRaises >= 2 ? `| Raises ${Math.floor(numRaises - 1)}` : \"\"}  \r\n  </b></p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: chatTemplate,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/sword.svg","actorIds":[],"_id":"7Zgu7h1PqVOW7jxw"}
{"name":"Shooting","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//Get Selected Actor\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet shootingSkill = selected.items.find((el) => el.data.name == \"Shooting\");\r\nif (shootingSkill == undefined) {\r\n  ui.notifications.warn(\"This actor does not have the Shooting Skill\");\r\n}\r\n\r\n//Ignores melee/wepons that don't have the 'shots' property\r\nlet weapons = selected.items.filter(\r\n  (el) => el.type == \"weapon\" && el.data.data.shots > 0\r\n);\r\n\r\n//SWADE rules for how much ammo is expended per RoF\r\nconst rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\r\n\r\ngetFiringSolution();\r\n\r\nfunction getFiringSolution() {\r\n  let weaponsDropdown = \"\";\r\n  weapons.forEach((wep) => {\r\n    weaponsDropdown += `<option value=\"${wep.name}\">${wep.name} | ROF ${wep.data.data.rof} | Shots ${wep.data.data.shots} </option>`;\r\n    //console.log(template);\r\n  });\r\n\r\n  let template = `\r\n    <div class=\"form-group\" style=\"display:flex; flex-direction:column;\">\r\n      <p>Select Weapon <select id=\"selectedWeapon\" style=\"\"> ${weaponsDropdown} </select> </p>\r\n      <p> \r\n        Target Cover \r\n        <select id=\"targetCover\" style=\"\">\r\n          <option value=0>No Cover</option>\r\n          <option value=-2>Light</option>\r\n          <option value=-4>Medium</option>\r\n          <option value=-6>Heavy</option>\r\n          <option value=-8>Complete</option>\r\n        </select>\r\n      </p>\r\n      <p>\r\n        Range Penalty\r\n        <select id=\"rangePenalty\" style=\"\">\r\n          <option value=0>Short Range</option>\r\n          <option value=-2>Medium</option>\r\n          <option value=-4>Long</option>\r\n          <option value=-8>Extreme</option>\r\n        </select>\r\n      </p>\r\n      <p>\r\n        Selected RoF\r\n        <input type=\"number\" id=\"selectedRoF\" style=\"width:50px\" value=1>\r\n      </p>\r\n      <p>\r\n        Recoil Penalty\r\n        <input type=\"number\" id=\"recoilPenalty\" style=\" width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Multi Action Penalty\r\n        <input type=\"number\" id=\"maPenalty\" style=\"width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Has The Drop?\r\n        <input type=\"checkbox\" id=\"theDrop\" syle=\"\" >\r\n      </p>\r\n      <p>\r\n        Other Shooting Modifiers\r\n        <input type=\"number\" id=\"otherMod\" style=\"width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Auto Subtract Ammo?\r\n        <input type=\"checkbox\" id=\"trackAmmo\" syle=\"\" checked />\r\n      </p>\r\n    </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Ranged Attack\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Fire Weapon\",\r\n        callback: async (html) => {\r\n          fireWeapon(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction fireWeapon(html) {\r\n  let weapon = weapons.find(\r\n    (el) => el.name == html.find(\"#selectedWeapon\")[0].value\r\n  );\r\n\r\n  //swade pg93\r\n  let numShootingDie = html.find(\"#selectedRoF\")[0].value;\r\n\r\n  //check if enough Ammo in clip to fire AND if RoF < weapon's RoF\r\n  if (numShootingDie > weapon.data.data.rof || numShootingDie < 1) {\r\n    ui.notifications.warn(\"Selected RoF beyond Weapon RoF\");\r\n    return;\r\n  }\r\n  if (\r\n    html.find(\"#trackAmmo\")[0].checked &&\r\n    rofAmmo[numShootingDie] > weapon.data.data.shots\r\n  ) {\r\n    ui.notifications.warn(\r\n      `Not enough Ammo to fire at this RoF. You only have (${weapon.data.data.shots}) shots left`\r\n    );\r\n    return;\r\n  }\r\n\r\n  let shootingSkillMod = isNaN(parseInt(shootingSkill.data.data.die.modifier))\r\n    ? 0\r\n    : parseInt(shootingSkill.data.data.die.modifier);\r\n  let coverMod = parseInt(html.find(\"#targetCover\")[0].value);\r\n  let recoilMod = parseInt(html.find(\"#recoilPenalty\")[0].value);\r\n  let multiActionMod = parseInt(html.find(\"#maPenalty\")[0].value);\r\n  let rangeMod = parseInt(html.find(\"#rangePenalty\")[0].value);\r\n  let otherMod = parseInt(html.find(\"#otherMod\")[0].value);\r\n  let theDropMod = html.find(\"#theDrop\")[0].checked ? 4 : 0;\r\n  let woundMod = selected.calcWoundFatigePenalties();\r\n  let statusMod = selected.calcStatusPenalties();\r\n\r\n  let totalMod =\r\n    shootingSkillMod +\r\n    coverMod +\r\n    recoilMod +\r\n    multiActionMod +\r\n    rangeMod +\r\n    otherMod +\r\n    theDropMod +\r\n    woundMod +\r\n    statusMod;\r\n\r\n  let tModStr = totalMod >= 0 ? `+${totalMod}` : `${totalMod}`;\r\n\r\n  let rollString = `1d${shootingSkill.data.data.die.sides}x= ${tModStr}`;\r\n  let wildString = `1d${shootingSkill.data.data[\"wild-die\"].sides}x= ${tModStr}`;\r\n\r\n  let rolls = [];\r\n  let results = [];\r\n  for (let i = 0; i < numShootingDie; i++) {\r\n    let roll = new Roll(rollString).roll();\r\n    if (game.dice3d) {\r\n      game.dice3d.showForRoll(roll);\r\n    }\r\n    rolls.push(roll.total);\r\n    results.push(roll.total);\r\n  }\r\n\r\n  let wildRoll;\r\n  if (selected.data.data.wildcard) {\r\n    wildRoll = new Roll(wildString).roll();\r\n    if (game.dice3d) {\r\n      game.dice3d.showForRoll(wildRoll);\r\n    }\r\n    results.push(wildRoll.total);\r\n    results.splice(results.indexOf(Math.min(...results)), 1); //drop lowest after adding in Wild Roll\r\n  }\r\n\r\n  //update Ammo\r\n  if (html.find(\"#trackAmmo\")[0].checked) {\r\n    let newShots = (weapon.data.data.shots -= rofAmmo[numShootingDie]);\r\n    weapon.update({ \"data.shots\": newShots });\r\n  }\r\n\r\n  let chatTemplate = `\r\n  <p>Weapon: ${weapon.data.name}</p>\r\n  <p>Notes: ${weapon.data.data.notes}</p>\r\n  <p>Shots Left: ${weapon.data.data.shots}</p>\r\n  <p></p>\r\n  <p>\r\n    Shooting Rolls: [${rolls}] \r\n    ${selected.data.data.wildcard ? ` | Wild Die Roll: ${wildRoll.total}` : \"\"}\r\n  </p>\r\n  <p>Roll String: ${rollString}</p>\r\n  <p></p>\r\n  <p>\r\n    Results: <b>[${results}]</b>\r\n  </p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: chatTemplate,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/target.svg","actorIds":[],"_id":"fedFk02vxLmEpg1O"}
{"name":"Damage","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Get Selected Actor\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\n//Get Target Actor\r\nif (Array.from(game.user.targets).length != 1) {\r\n  ui.notifications.warn(\"Please select a SINGLE target\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet target = Array.from(game.user.targets)[0].actor;\r\n\r\nlet selectedWeaponsList = selected.items.filter(\r\n  (el) => el.data.type == \"weapon\" && el.data.data.equipped\r\n);\r\n//weapons dmg roll:\r\n//let roll = new Roll(itemData.damage, actor.getRollShortcuts()).roll();\r\n\r\nlet targetArmors = target.items.filter(\r\n  (el) => el.data.data.equipped && el.data.type == \"armor\"\r\n);\r\nlet targetArmor = 0;\r\ntargetArmors.map((el) => {\r\n  targetArmor += parseInt(el.data.data.armor);\r\n});\r\n\r\nlet targetToughenss = target.data.data.stats.toughness; //{toughness =\"\", armor: #, mod: #}\r\n// console.log(targetToughenss);\r\nrollDamage();\r\nfunction rollDamage() {\r\n  //| Other Mods: ${targetToughenss.modifier}\r\n  let template = `\r\n  <div>\r\n    <p><b>Selected Token Information</b></p>\r\n    <div class = \"form-group\">\r\n    <label>Select Weapon</label>\r\n    <select id=\"selectedWeapon\">\r\n    ${getWeaponsList()}\r\n    </select>\r\n    <p></p>\r\n    <p><b>Target Information</b></p>\r\n    <p>Base Toughness: ${targetToughenss.value} | Armor: ${targetArmor} </p> \r\n    <p>Armor Notes: </p>\r\n    ${getTargetArmorNotes()}\r\n    <p>Ignore Armor: <input type=\"checkbox\" id=\"ignoreArmor\"></input></p>    \r\n    <p></p>\r\n    <p><b>Other Modifiers</b></p>\r\n    <p>\r\n    <label>Has the Drop?</label>\r\n    <input type=\"checkbox\" id=\"hasDrop\"></input>\r\n    <label>Roll Bonus Damage?</label>\r\n    <input type=\"checkbox\" id=\"bonusDmg\"></input>\r\n    </p>\r\n\r\n    <p>\r\n    <label> Other Damage Mod </label>\r\n    <input type=\"number\" id=\"dmgMod\" value=0 style=\"width:50px\"></input>\r\n    </p>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Damage Roll\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Roll Damage\",\r\n        callback: async (html) => {\r\n          dealDamage(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction getWeaponsList() {\r\n  let template = ``;\r\n  selectedWeaponsList.forEach((wep) => {\r\n    template += `<option value=\"${wep.name}\">${wep.name} | AP ${wep.data.data.ap} | DMG: ${wep.data.data.damage}</option>`;\r\n  });\r\n\r\n  return template;\r\n}\r\nfunction getTargetArmorNotes() {\r\n  let template = ``;\r\n  targetArmors.forEach((armor) => {\r\n    template += `<p>${armor.name} | ${armor.data.data.notes}</p>`;\r\n  });\r\n  return template;\r\n}\r\n\r\nfunction dealDamage(html) {\r\n  let selectedWeapon = selectedWeaponsList.find(\r\n    (el) => el.name == html.find(\"#selectedWeapon\")[0].value\r\n  );\r\n\r\n  let parts = selectedWeapon.data.data.damage.split(\"+\");\r\n  parts = parts.map((part) => {\r\n    if (part.indexOf(\"d\") > -1) {\r\n      return `${part}x=`;\r\n    } else {\r\n      return part;\r\n    }\r\n  });\r\n\r\n  let wepDmgRoll = \"\";\r\n  for (let i = 0; i < parts.length; i++) {\r\n    if (i != parts.length - 1) {\r\n      wepDmgRoll += `${parts[i]} +`;\r\n    } else {\r\n      wepDmgRoll += parts[i];\r\n    }\r\n  }\r\n  let dmgMod =\r\n    parseInt(html.find(\"#dmgMod\")[0].value) +\r\n    (html.find(\"#hasDrop\")[0].checked ? 4 : 0);\r\n\r\n  let rollString =\r\n    wepDmgRoll +\r\n    (html.find(\"#bonusDmg\")[0].checked ? \" +1d6x=\" : \"\") +\r\n    (dmgMod >= 0 ? ` +${dmgMod}` : ` ${dmgMod}`);\r\n\r\n  let roll = new Roll(rollString, actor.getRollShortcuts()).roll();\r\n  if (game.dice3d) {\r\n    game.dice3d.showForRoll(roll);\r\n  }\r\n\r\n  let armorAfterAP = targetArmor - selectedWeapon.data.data.ap;\r\n  armorAfterAP = armorAfterAP < 0 ? 0 : armorAfterAP;\r\n\r\n  let tough =\r\n    parseInt(targetToughenss.value) +\r\n    (html.find(\"#ignoreArmor\")[0].checked ? 0 : armorAfterAP); // + targetToughenss.modifier;\r\n\r\n  let dmg = roll.total - tough;\r\n  let numSuccesses = dmg / 4;\r\n\r\n  //The Success/Raise calculation is intentionally different than other macros\r\n  let result = `\r\n  <p>Weapon: ${selectedWeapon.name} | AP ${selectedWeapon.data.data.ap}</p>\r\n  <p>Roll String: ${rollString}</p>\r\n  <p>Damage Roll: ${roll.total}</p>\r\n  <p>Target Toughness After AP: ${tough}</p>\r\n  <p></p>\r\n  <p>Damage dealt: <b>${dmg}</b></p>\r\n  <p><b>\r\n  ${numSuccesses >= 0 ? \"Success\" : \"No Damage\"} \r\n  ${numSuccesses >= 1 ? `| Raises ${Math.floor(numSuccesses)}` : \"\"}  \r\n  </b></p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: result,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jvrqZthcEBFZqSeS"}
