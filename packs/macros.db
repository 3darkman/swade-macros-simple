{"name":"Fighting","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Fighting vs Parry\r\n// Take into account The Drop\r\n\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\nif (Array.from(game.user.targets).length != 1) {\r\n  ui.notifications.warn(\"Please select a SINGLE target\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet target = Array.from(game.user.targets)[0].actor;\r\n\r\nlet meleeWeaponsList = selected.items.filter(\r\n  (el) => el.data.type == \"weapon\" && el.data.data.damage.indexOf(\"@str\") >= 0\r\n);\r\n\r\nlet targetParry = target.data.data.stats.parry.value;\r\nlet targetShields = target.items.filter(\r\n  (el) => el.data.data.equipped && el.data.type == \"shield\"\r\n);\r\n\r\nlet targetParryMod = 0;\r\ntargetShields.map((el) => {\r\n  targetParryMod += parseInt(el.data.data.parry);\r\n});\r\n\r\ngetFightingSolution();\r\n\r\nfunction getFightingSolution() {\r\n  let template = `\r\n  <div class=\"form-group\">\r\n    <p>Target Parry ${targetParry} | Parry Bonus from Shield ${targetParryMod}</p>\r\n    <p></p>\r\n    <p> Has the Drop? <input type=\"checkbox\" id=\"theDrop\" unchecked /> </p>\r\n    <p> Unarmed Defender? <input type=\"checkbox\" id=\"unarmedDefender\" unchecked /> </p>\r\n    <label>Called Shot Mod</label>\r\n    <input type=\"number\" id=\"calledShot\" style=\"width:50px;\" value=0>\r\n    <label> Other Modifiers </label>\r\n    <input type=\"number\" id=\"otherMod\" style=\"width:50px;\" value=0>\r\n\r\n    </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Fighting Roll\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Roll Fighting\",\r\n        callback: async (html) => {\r\n          rollFighting(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction rollFighting(html) {\r\n  let fightSkill = selected.items.find((el) => el.name == \"Fighting\");\r\n  let rollFormula = \"\";\r\n  let modifier = \"\";\r\n\r\n  // Check if Skill Defined\r\n  // Check if Wildcard\r\n\r\n  if (fightSkill && fightSkill.data.data.die.modifier == \"\") {\r\n    modifier = \"+0\";\r\n  } else if (fightSkill && parseInt(fightSkill.data.data.die.modifier) >= 0) {\r\n    modifier = `+${parseInt(fightSkill.data.data.die.modifier)}`;\r\n  } else if (fightSkill) {\r\n    console.log(\"\");\r\n    modifier = parseInt(fightSkill.data.data.modifier).toString(); // - is baked into a negative\r\n  } else {\r\n    modifier = \"-2\"; //unskilled\r\n  }\r\n\r\n  let otherMods = 0;\r\n  otherMods += parseInt(html.find(\"#otherMod\")[0].value);\r\n  otherMods += parseInt(html.find(\"#calledShot\")[0].value);\r\n  otherMods += html.find(\"#unarmedDefender\")[0].checked ? 2 : 0;\r\n  otherMods += html.find(\"#theDrop\")[0].checked ? 4 : 0;\r\n  otherMods += selected.calcWoundFatigePenalties();\r\n  otherMods += selected.calcStatusPenalties();\r\n  let otherModifier = otherMods >= 0 ? `+${otherMods}` : parseInt(otherMods);\r\n\r\n  if (fightSkill && selected.data.data.wildcard) {\r\n    //WC with Fight Skill\r\n    //console.log(\"WC with Fight Skill\");\r\n    rollFormula = `{1d${fightSkill.data.data.die.sides}x=, 1d${fightSkill.data.data[\"wild-die\"].sides}x=}kh ${modifier} ${otherModifier}`;\r\n  } else if (selected.data.data.wildcard) {\r\n    rollFormula = `{1d4x=, 1d6x=}kh ${modifier} ${otherModifier}`;\r\n    //WC without Fight skill\r\n  } else if (fightSkill) {\r\n    //NPC with Fight Skill\r\n    //console.log(\"NPC with Fight Skill\");\r\n    rollFormula = `1d${fightSkill.data.data.die.sides}x= ${modifier} ${otherModifier}`;\r\n  } else {\r\n    //NPC without Fight Skill\r\n    //console.log(\"NPC \");\r\n    rollFormula = `1d4x= ${modifier} ${otherModifier}`;\r\n  }\r\n\r\n  let roll = new Roll(rollFormula).roll();\r\n  if (game.dice3d) {\r\n    game.dice3d.showForRoll(roll);\r\n  }\r\n\r\n  let numRaises = (roll.total - (targetParry + targetParryMod)) / 4;\r\n\r\n  let chatTemplate = `\r\n  <p> Fighting Skill: ${\r\n    fightSkill ? fightSkill.data.data.die.sides : \"Unskilled\"\r\n  } </p>\r\n  <p> Target Parry (Shield Bonus): ${targetParry}(${targetParryMod}) </p>\r\n  <p> Roll Formula: ${rollFormula} </p>\r\n  <p></p>\r\n  <p> Roll: ${roll.total} </p>\r\n  <p> <b>\r\n  ${numRaises >= 0 ? \"Success\" : \"Did Not Hit\"} \r\n  ${numRaises >= 2 ? `| Raises ${Math.floor(numRaises - 1)}` : \"\"}  \r\n  </b></p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: chatTemplate,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/sword.svg","actorIds":[],"_id":"7Zgu7h1PqVOW7jxw"}
{"name":"Shooting","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//Get Selected Actor\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet shootingSkill = selected.items.find((el) => el.data.name == \"Shooting\");\r\nif (shootingSkill == undefined) {\r\n  ui.notifications.warn(\"This actor does not have the Shooting Skill\");\r\n}\r\n\r\n//Ignores melee/wepons that don't have the 'shots' property\r\nlet weapons = selected.items.filter(\r\n  (el) => el.type == \"weapon\" && el.data.data.shots > 0\r\n);\r\n\r\n//SWADE rules for how much ammo is expended per RoF\r\nconst rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\r\n\r\ngetFiringSolution();\r\n\r\nfunction getFiringSolution() {\r\n  let weaponsDropdown = \"\";\r\n  weapons.forEach((wep) => {\r\n    weaponsDropdown += `<option value=\"${wep.name}\">${wep.name} | ROF ${wep.data.data.rof} | Shots ${wep.data.data.shots} </option>`;\r\n    //console.log(template);\r\n  });\r\n\r\n  let template = `\r\n    <div class=\"form-group\" style=\"display:flex; flex-direction:column;\">\r\n      <p>Select Weapon <select id=\"selectedWeapon\" style=\"\"> ${weaponsDropdown} </select> </p>\r\n      <p> \r\n        Target Cover \r\n        <select id=\"targetCover\" style=\"\">\r\n          <option value=0>No Cover</option>\r\n          <option value=-2>Light</option>\r\n          <option value=-4>Medium</option>\r\n          <option value=-6>Heavy</option>\r\n          <option value=-8>Complete</option>\r\n        </select>\r\n      </p>\r\n      <p>\r\n        Range Penalty\r\n        <select id=\"rangePenalty\" style=\"\">\r\n          <option value=0>Short Range</option>\r\n          <option value=-2>Medium</option>\r\n          <option value=-4>Long</option>\r\n          <option value=-8>Extreme</option>\r\n        </select>\r\n      </p>\r\n      <p>\r\n        Selected RoF\r\n        <input type=\"number\" id=\"selectedRoF\" style=\"width:50px\" value=1>\r\n      </p>\r\n      <p>\r\n        Recoil Penalty\r\n        <input type=\"number\" id=\"recoilPenalty\" style=\" width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Multi Action Penalty\r\n        <input type=\"number\" id=\"maPenalty\" style=\"width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Has The Drop?\r\n        <input type=\"checkbox\" id=\"theDrop\" syle=\"\" >\r\n      </p>\r\n      <p>\r\n        Other Shooting Modifiers\r\n        <input type=\"number\" id=\"otherMod\" style=\"width:50px\" value=0>\r\n      </p>\r\n      <p>\r\n        Auto Subtract Ammo?\r\n        <input type=\"checkbox\" id=\"trackAmmo\" syle=\"\" checked />\r\n      </p>\r\n    </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Ranged Attack\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Fire Weapon\",\r\n        callback: async (html) => {\r\n          fireWeapon(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction fireWeapon(html) {\r\n  let weapon = weapons.find(\r\n    (el) => el.name == html.find(\"#selectedWeapon\")[0].value\r\n  );\r\n\r\n  //swade pg93\r\n  let numShootingDie = html.find(\"#selectedRoF\")[0].value;\r\n\r\n  //check if enough Ammo in clip to fire AND if RoF < weapon's RoF\r\n  if (numShootingDie > weapon.data.data.rof || numShootingDie < 1) {\r\n    ui.notifications.warn(\"Selected RoF beyond Weapon RoF\");\r\n    return;\r\n  }\r\n  if (\r\n    html.find(\"#trackAmmo\")[0].checked &&\r\n    rofAmmo[numShootingDie] > weapon.data.data.shots\r\n  ) {\r\n    ui.notifications.warn(\r\n      `Not enough Ammo to fire at this RoF. You only have (${weapon.data.data.shots}) shots left`\r\n    );\r\n    return;\r\n  }\r\n\r\n  let shootingSkillMod = isNaN(parseInt(shootingSkill.data.data.die.modifier))\r\n    ? 0\r\n    : parseInt(shootingSkill.data.data.die.modifier);\r\n  let coverMod = parseInt(html.find(\"#targetCover\")[0].value);\r\n  let recoilMod = parseInt(html.find(\"#recoilPenalty\")[0].value);\r\n  let multiActionMod = parseInt(html.find(\"#maPenalty\")[0].value);\r\n  let rangeMod = parseInt(html.find(\"#rangePenalty\")[0].value);\r\n  let otherMod = parseInt(html.find(\"#otherMod\")[0].value);\r\n  let theDropMod = html.find(\"#theDrop\")[0].checked ? 4 : 0;\r\n  let woundMod = selected.calcWoundFatigePenalties();\r\n  let statusMod = selected.calcStatusPenalties();\r\n\r\n  let totalMod =\r\n    shootingSkillMod +\r\n    coverMod +\r\n    recoilMod +\r\n    multiActionMod +\r\n    rangeMod +\r\n    otherMod +\r\n    theDropMod +\r\n    woundMod +\r\n    statusMod;\r\n\r\n  let tModStr = totalMod >= 0 ? `+${totalMod}` : `${totalMod}`;\r\n\r\n  let rollString = `1d${shootingSkill.data.data.die.sides}x= ${tModStr}`;\r\n  let wildString = `1d${shootingSkill.data.data[\"wild-die\"].sides}x= ${tModStr}`;\r\n\r\n  let rolls = [];\r\n  let results = [];\r\n  for (let i = 0; i < numShootingDie; i++) {\r\n    let roll = new Roll(rollString).roll();\r\n    if (game.dice3d) {\r\n      game.dice3d.showForRoll(roll);\r\n    }\r\n    rolls.push(roll.total);\r\n    results.push(roll.total);\r\n  }\r\n\r\n  let wildRoll;\r\n  if (selected.data.data.wildcard) {\r\n    wildRoll = new Roll(wildString).roll();\r\n    if (game.dice3d) {\r\n      game.dice3d.showForRoll(wildRoll);\r\n    }\r\n    results.push(wildRoll.total);\r\n    results.splice(results.indexOf(Math.min(...results)), 1); //drop lowest after adding in Wild Roll\r\n  }\r\n\r\n  //update Ammo\r\n  if (html.find(\"#trackAmmo\")[0].checked) {\r\n    let newShots = (weapon.data.data.shots -= rofAmmo[numShootingDie]);\r\n    weapon.update({ \"data.shots\": newShots });\r\n  }\r\n\r\n  let chatTemplate = `\r\n  <p>Weapon: ${weapon.data.name}</p>\r\n  <p>Notes: ${weapon.data.data.notes}</p>\r\n  <p>Shots Left: ${weapon.data.data.shots}</p>\r\n  <p></p>\r\n  <p>\r\n    Shooting Rolls: [${rolls}] \r\n    ${selected.data.data.wildcard ? ` | Wild Die Roll: ${wildRoll.total}` : \"\"}\r\n  </p>\r\n  <p>Roll String: ${rollString}</p>\r\n  <p></p>\r\n  <p>\r\n    Results: <b>[${results}]</b>\r\n  </p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: chatTemplate,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/target.svg","actorIds":[],"_id":"fedFk02vxLmEpg1O"}
{"name":"Damage","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Get Selected Actor\r\nif (canvas.tokens.controlled.length != 1) {\r\n  ui.notifications.warn(\"Please select a single token to use with this Macro\");\r\n}\r\n\r\n//Get Target Actor\r\nif (Array.from(game.user.targets).length != 1) {\r\n  ui.notifications.warn(\"Please select a SINGLE target\");\r\n}\r\n\r\nlet selected = canvas.tokens.controlled[0].actor;\r\nlet target = Array.from(game.user.targets)[0].actor;\r\n\r\nlet selectedWeaponsList = selected.items.filter(\r\n  (el) => el.data.type == \"weapon\" && el.data.data.equipped\r\n);\r\n//weapons dmg roll:\r\n//let roll = new Roll(itemData.damage, actor.getRollShortcuts()).roll();\r\n\r\nlet targetArmors = target.items.filter(\r\n  (el) => el.data.data.equipped && el.data.type == \"armor\"\r\n);\r\nlet targetArmor = 0;\r\ntargetArmors.map((el) => {\r\n  targetArmor += parseInt(el.data.data.armor);\r\n});\r\n\r\nlet targetToughenss = target.data.data.stats.toughness; //{toughness =\"\", armor: #, mod: #}\r\n// console.log(targetToughenss);\r\nrollDamage();\r\nfunction rollDamage() {\r\n  //| Other Mods: ${targetToughenss.modifier}\r\n  let template = `\r\n  <div>\r\n    <p><b>Selected Token Information</b></p>\r\n    <div class = \"form-group\">\r\n    <label>Select Weapon</label>\r\n    <select id=\"selectedWeapon\">\r\n    ${getWeaponsList()}\r\n    </select>\r\n    <p></p>\r\n    <p><b>Target Information</b></p>\r\n    <p>Base Toughness: ${targetToughenss.value} | Armor: ${targetArmor} </p> \r\n    <p>Armor Notes: </p>\r\n    ${getTargetArmorNotes()}\r\n    <p>Ignore Armor: <input type=\"checkbox\" id=\"ignoreArmor\"></input></p>    \r\n    <p></p>\r\n    <p><b>Other Modifiers</b></p>\r\n    <p>\r\n    <label>Has the Drop?</label>\r\n    <input type=\"checkbox\" id=\"hasDrop\"></input>\r\n    <label>Roll Bonus Damage?</label>\r\n    <input type=\"checkbox\" id=\"bonusDmg\"></input>\r\n    </p>\r\n\r\n    <p>\r\n    <label> Other Damage Mod </label>\r\n    <input type=\"number\" id=\"dmgMod\" value=0 style=\"width:50px\"></input>\r\n    </p>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  new Dialog({\r\n    title: \"Damage Roll\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Roll Damage\",\r\n        callback: async (html) => {\r\n          dealDamage(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nfunction getWeaponsList() {\r\n  let template = ``;\r\n  selectedWeaponsList.forEach((wep) => {\r\n    template += `<option value=\"${wep.name}\">${wep.name} | AP ${wep.data.data.ap} | DMG: ${wep.data.data.damage}</option>`;\r\n  });\r\n\r\n  return template;\r\n}\r\nfunction getTargetArmorNotes() {\r\n  let template = ``;\r\n  targetArmors.forEach((armor) => {\r\n    template += `<p>${armor.name} | ${armor.data.data.notes}</p>`;\r\n  });\r\n  return template;\r\n}\r\n\r\nfunction dealDamage(html) {\r\n  let selectedWeapon = selectedWeaponsList.find(\r\n    (el) => el.name == html.find(\"#selectedWeapon\")[0].value\r\n  );\r\n\r\n  let parts = selectedWeapon.data.data.damage.split(\"+\");\r\n  parts = parts.map((part) => {\r\n    if (part.indexOf(\"d\") > -1) {\r\n      return `${part}x=`;\r\n    } else {\r\n      return part;\r\n    }\r\n  });\r\n\r\n  let wepDmgRoll = \"\";\r\n  for (let i = 0; i < parts.length; i++) {\r\n    if (i != parts.length - 1) {\r\n      wepDmgRoll += `${parts[i]} +`;\r\n    } else {\r\n      wepDmgRoll += parts[i];\r\n    }\r\n  }\r\n  let dmgMod =\r\n    parseInt(html.find(\"#dmgMod\")[0].value) +\r\n    (html.find(\"#hasDrop\")[0].checked ? 4 : 0);\r\n\r\n  let rollString =\r\n    wepDmgRoll +\r\n    (html.find(\"#bonusDmg\")[0].checked ? \" +1d6x=\" : \"\") +\r\n    (dmgMod >= 0 ? ` +${dmgMod}` : ` ${dmgMod}`);\r\n\r\n  let roll = new Roll(rollString, actor.getRollShortcuts()).roll();\r\n  if (game.dice3d) {\r\n    game.dice3d.showForRoll(roll);\r\n  }\r\n\r\n  let armorAfterAP = targetArmor - selectedWeapon.data.data.ap;\r\n  armorAfterAP = armorAfterAP < 0 ? 0 : armorAfterAP;\r\n\r\n  let tough =\r\n    parseInt(targetToughenss.value) +\r\n    (html.find(\"#ignoreArmor\")[0].checked ? 0 : armorAfterAP); // + targetToughenss.modifier;\r\n\r\n  let dmg = roll.total - tough;\r\n  let numSuccesses = dmg / 4;\r\n\r\n  //The Success/Raise calculation is intentionally different than other macros\r\n  let result = `\r\n  <p>Weapon: ${selectedWeapon.name} | AP ${selectedWeapon.data.data.ap}</p>\r\n  <p>Roll String: ${rollString}</p>\r\n  <p>Damage Roll: ${roll.total}</p>\r\n  <p>Target Toughness After AP: ${tough}</p>\r\n  <p></p>\r\n  <p>Damage dealt: <b>${dmg}</b></p>\r\n  <p><b>\r\n  ${numSuccesses >= 0 ? \"Success\" : \"No Damage\"} \r\n  ${numSuccesses >= 1 ? `| Raises ${Math.floor(numSuccesses)}` : \"\"}  \r\n  </b></p>\r\n  `;\r\n\r\n  ChatMessage.create({\r\n    speaker: {\r\n      actor: selected,\r\n      alias: selected.name,\r\n    },\r\n    content: result,\r\n  });\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"jvrqZthcEBFZqSeS"}
{"name":"Combat Flow","permission":{"default":0,"BSvjXza0l57UiOE7":3},"type":"script","flags":{},"scope":"global","command":"let isValidConditions = true;\r\nlet diceStep = [\"d4\", \"d6\", \"d8\", \"d10\", \"d12\"];\r\nlet currentActor;\r\n\r\n//Uses the selected actor to figure out guns\r\nif (canvas.tokens.controlled.length != 1) {\r\n    ui.notifications.warn(i18n(\"swadeMacro.ui.notification.needActor\"));\r\n    isValidConditions = false;\r\n}else{\r\n    // Set Actor\r\n    currentActor = canvas.tokens.controlled[0].actor;\r\n\r\n    // Check shaken state\r\n    if (currentActor.data.data.status.isShaken) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.actorShaken\"));\r\n        isValidConditions = false;\r\n    }\r\n}\r\n\r\n// Check target selected\r\nif (Array.from(game.user.targets).length != 1) {\r\n    ui.notifications.warn(i18n(\"swadeMacro.ui.notification.needTarget\"));\r\n    isValidConditions = false;\r\n}\r\n\r\nlet currentTarget;\r\nlet weapons;\r\n\r\nfunction i18n(key) {\r\n    return game.i18n.localize(key);\r\n}\r\n\r\nif (isValidConditions) openDialogCombat();\r\n\r\n// Attack type choice\r\nasync function openDialogCombat()\r\n{   \r\n    // Set actor target\r\n    currentTarget = Array.from(game.user.targets)[0].actor;\r\n\r\n    // Set weapons list\r\n    weapons = currentActor.items.filter((el) => el.type == \"weapon\" && el.data.data.equipped);\r\n\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-combat.html\");\r\n\r\n    new Dialog({\r\n        title: i18n(\"swadeMacro.combatDialog.title\"),\r\n        content: template,\r\n        buttons: {\r\n            contact: {\r\n                label: i18n(\"swadeMacro.combatDialog.meleeButton\"),\r\n                callback: async (html) => {\r\n                    meleeAttackForm(html);\r\n                },\r\n            },\r\n            ranged: {\r\n                label: i18n(\"swadeMacro.combatDialog.rangeButton\"),\r\n                callback: async (html) => {\r\n                    rangedAttackForm(html);\r\n                },\r\n            }\r\n        },\r\n    }, { width: 400 }).render(true);\r\n    \r\n}\r\n\r\n//Utility function for printing things to chat\r\nfunction printMessage(message) {\r\n    ChatMessage.create(\r\n        {\r\n        speaker: {\r\n            actor: currentActor,\r\n            alias: currentActor.name,\r\n        },\r\n        content: message,\r\n        },\r\n        {}\r\n    );\r\n} // end  printMessage\r\n\r\n// Add EventListener to a html element\r\nfunction addEventListenerOnHtmlElement(element, event, func){\r\n    // Use Hook to add event to chat message html element\r\n    Hooks.once(\"renderChatMessage\", (chatItem, html) => { \r\n        html[0].querySelector(element).addEventListener(event, func);\r\n    });\r\n} // end addEventListenerOnHtmlElement\r\n\r\n// melee attack form\r\nasync function  meleeAttackForm(){\r\n     let meleeWeapons = weapons.filter((el) => el.data.data.range == \"0\" || el.data.data.range == \"\");\r\n \r\n    // Check if template is not empty\r\n    if (meleeWeapons.length == 0) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noWeaponsMessage\"));\r\n        isValidConditions = false;\r\n    }\r\n\r\n    // Prepare melee atack form template\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-melee-attack.html\",{weapons : meleeWeapons });\r\n\r\n    if (isValidConditions) {\r\n        // Show form\r\n        new Dialog({\r\n            title: i18n(\"swadeMacro.meleeCombatDialog.title\"),\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                    label: i18n(\"swadeMacro.meleeCombatDialog.confirmButton\"),\r\n                    callback: async (html) => {\r\n                    commitAttack({ html, attackSkillName : game.settings.get(\"swade-macros-simple\", \"skillFighting\") });\r\n                    },\r\n                },\r\n                cancel: {\r\n                    label: i18n(\"swadeMacro.meleeCombatDialog.cancelButton\"),\r\n                },\r\n            },\r\n            default: \"ok\",\r\n        }, { width: 550 }).render(true);\r\n    }\r\n} // end contactAttackForm\r\n\r\n// Ranged attack form\r\nasync function rangedAttackForm(){\r\n\r\n    let rangeWeapons = weapons.filter((el) => el.data.data.range != \"0\" && el.data.data.range != \"\")\r\n    // Check if template is not empty\r\n    if (rangeWeapons.length == 0) {\r\n        ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noWeaponsMessage\"));\r\n        isValidConditions = false;\r\n    }\r\n    //templateWeaponsList += `<option value=\"${wep.name}\">${wep.name} | RoF ${wep.data.data.rof} | shots ${wep.data.data.shots} </option>`;\r\n    // Prepare range atack form template\r\n    let trackAmmoConsumption = game.settings.get(\"swade-macros-simple\", \"trackAmmoConsumption\");\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-range-attack.html\",{weapons : rangeWeapons, trackAmmo : trackAmmoConsumption, notTrackAmmo : !trackAmmoConsumption });\r\n\r\n    // Show form\r\n    if (isValidConditions) {\r\n        new Dialog({\r\n            title: i18n(\"swadeMacro.rangeCombatDialog.title\"),\r\n            content: template,\r\n            buttons: {\r\n                ok: {\r\n                label: i18n(\"swadeMacro.rangeCombatDialog.confirmButton\"),\r\n                callback: async (html) => {\r\n                    commitAttack({ html, attackSkillName : game.settings.get(\"swade-macros-simple\", \"skillShooting\") });\r\n                },\r\n                },\r\n                cancel: {\r\n                label: i18n(\"swadeMacro.rangeCombatDialog.cancelButton\"),\r\n                },\r\n            },\r\n            default: \"ok\",\r\n        },{ width: 550 }).render(true);\r\n    }\r\n\r\n} // end rangedAttackForm\r\n\r\n// Settings for damage outpout\r\nasync function damageSettings(params, eventTarget)\r\n{\r\n    let doubleTapEdge = params.doubleTapEdge;\r\n    let threeRoundBurstAbility = params.threeRoundBurstAbility;\r\n    let grittyDamage = game.settings.get(\"swade-macros-simple\", \"grittyDamage\");\r\n\r\n    let template = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/dialog-damage-settings.html\", {\r\n        doubleTapEdge : doubleTapEdge,\r\n        threeRoundBurstAbility : threeRoundBurstAbility,\r\n        isGrittyDamage : grittyDamage,\r\n        notGrittyDamage : !grittyDamage\r\n    });\r\n\r\n    new Dialog({\r\n        title: i18n(\"swadeMacro.damageSettingsDialog.title\"),\r\n        content: template,\r\n        buttons: {\r\n            ok: {\r\n            label: i18n(\"swadeMacro.damageSettingsDialog.confirmButton\"),\r\n            callback: async (html) => {\r\n                eventTarget.style.display = \"none\";\r\n                params.html = html;\r\n                damageResult(params);\r\n            },\r\n            },\r\n            cancel: {\r\n            label: i18n(\"swadeMacro.damageSettingsDialog.cancelButton\"),\r\n            },\r\n        },\r\n        default: \"ok\",\r\n    },{ width: 540 }).render(true);    \r\n} //end damageSettings\r\n\r\n//Attack process\r\nasync function commitAttack(params)\r\n{\r\n\r\n    let html = params.html;\r\n    let attackSkillName = params.attackSkillName;\r\n    let bennieUsed = params.bennieUsed;\r\n\r\n    let ammoUsed = 0;\r\n\r\n    //SWADE rules for how much ammo is expended per RoF\r\n    let rofAmmo = { 1: 1, 2: 5, 3: 10, 4: 20, 5: 40, 6: 50 };\r\n\r\n    //SWADE rules SizeScale\r\n    let sizeScale = [\r\n        {size: -4, mod : -6}, {size: -3, mod : -4}, {size: -2, mod : -2}, {size: -1, mod : 0},\r\n        {size: 0, mod : 0}, {size: 1, mod : 0}, {size: 2, mod : 0}, {size: 3, mod : 0},\r\n        {size: 4, mod : 2}, {size: 5, mod : 2}, {size: 6, mod : 2}, {size: 7, mod : 2},\r\n        {size: 8, mod : 4}, {size: 9, mod : 4}, {size: 10, mod : 4}, {size: 11, mod : 4},\r\n        {size: 12, mod : 6}, {size: 13, mod : 6}, {size: 14, mod : 6}, {size: 15, mod : 6},\r\n        {size: 16, mod : 6}, {size: 17, mod : 6}, {size: 18, mod : 6}, {size: 19, mod : 6}, {size: 20, mod : 6}\r\n    ];\r\n\r\n\r\n    // Get weapon selected\r\n    let weapon = weapons.find((el) => el.name == html.find(\"#selectedWeapon\")[0].value);\r\n\r\n    // Get number of attack if a ranged attack or set to 1 for melee attack\r\n    let nbAttack = html.find(\"#selectedRoF\")[0] === undefined ? 1 : html.find(\"#selectedRoF\")[0].value;\r\n\r\n    // Get skill need for attack\r\n    let attackSkill = currentActor.items.find((el) => el.data.name == attackSkillName);\r\n\r\n    // Get Track ammo setting\r\n    let trackAmmo = html.find(\"#trackAmmo\")[0] === undefined ? 0 : html.find(\"#trackAmmo\")[0].checked ? -2 : 0;\r\n\r\n    // Get double Tap option\r\n    let doubleTapEdge = html.find(\"#doubleTap\")[0] === undefined ? 0 : html.find(\"#doubleTap\")[0].checked ? 1 : 0;\r\n\r\n    // Get three round burst ability\r\n    let threeRoundBurstAbility = html.find(\"#threeRoundBurst\")[0] === undefined ? 0 : html.find(\"#threeRoundBurst\")[0].checked ? 1 : 0;\r\n\r\n    // Set nbAttack for his special abilities\r\n    if (doubleTapEdge || threeRoundBurstAbility) nbAttack = 1\r\n\r\n    // Simulate unskilled skill when the attack skill is not found\r\n    if (attackSkill === null) attackSkill = { data : { data : { die : { sides : 4, modifier: -2 }, \"wild-die\" : { sides : 6 }  } } };\r\n\r\n    //Some check for Ranged Attack\r\n    if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\")) {\r\n        ammoUsed = rofAmmo[nbAttack];\r\n\r\n        if (threeRoundBurstAbility) ammoUsed = 3;\r\n        if (doubleTapEdge) ammoUsed * 2;\r\n\r\n        // Check RoF\r\n        if ((nbAttack > weapon.data.data.rof)) {\r\n            ui.notifications.warn(i18n(\"swadeMacro.ui.notification.rofNotValid\"));\r\n            isValidConditions = false;\r\n        };\r\n        \r\n        // Check ammo\r\n        if (ammoUsed > weapon.data.data.shots) {\r\n            ui.notifications.warn(i18n(\"swadeMacro.ui.notification.noEnougthAmmo\"));\r\n            isValidConditions = false;\r\n        };\r\n    };\r\n\r\n    let diceResultPool = [];\r\n    // Roll Dices\r\n    for (let i = 0; i < nbAttack; i++) {\r\n        diceResultPool.push({ type: \"skillRoll\", roll : new Roll(\"1d\" + attackSkill.data.data.die.sides + \"x=\" + (attackSkill.data.data.die.modifier == \"\" ? \"\" : \" + \" + attackSkill.data.data.die.modifier)).roll(), saved : 1});\r\n    }\r\n\r\n    // Roll Wild for Joker\r\n    // Last entities in dicePoolResult is Wild\r\n    if (currentActor.data.data.wildcard) {\r\n        diceResultPool.push({ type: \"wildRoll\", roll : new Roll(\"1d\" + attackSkill.data.data[\"wild-die\"].sides + \"x=\").roll(), saved : 1});\r\n    }\r\n\r\n    // Unsaved lesser result from Dice Pool\r\n    if (diceResultPool.length > 1)\r\n        diceResultPool[diceResultPool.findIndex((el) => el.roll.total == Math.min(...diceResultPool.map((el) => el.roll.total)))].saved = 0;\r\n\r\n    // Build Modifiers\r\n    let skillModPool = [];\r\n    //skillModPool.push({ mod : \"skilled\", value : !parseInt(attackSkill.data.data.die.modifier) ? 0 : parseInt(attackSkill.data.data.die.modifier) });\r\n    skillModPool.push({ mod : \"rangePenalty\", title : i18n(\"swadeMacro.attack.skillMod.rangePenality\"), abilitie : 0, value : html.find(\"#rangePenalty\")[0] === undefined ? 0 : parseInt(html.find(\"#rangePenalty\")[0].value) });\r\n    skillModPool.push({ mod : \"targetCover\", title : i18n(\"swadeMacro.attack.skillMod.targetCover\"), abilitie : 0, value : html.find(\"#targetCover\")[0] === undefined ? 0 : parseInt(html.find(\"#targetCover\")[0].value) });\r\n    skillModPool.push({ mod : \"isRecoil\", title : i18n(\"swadeMacro.attack.skillMod.isRecoil\"), abilitie : 0, value : html.find(\"#isRecoil\")[0] === undefined ? 0 : html.find(\"#isRecoil\")[0].checked ? -2 : 0 });\r\n    skillModPool.push({ mod : \"isUnstable\", title : i18n(\"swadeMacro.attack.skillMod.isUnstable\"), abilitie : 0, value : html.find(\"#isUnstable\")[0] === undefined ? 0 : html.find(\"#isUnstable\")[0].checked ? -2 : 0 });\r\n    skillModPool.push({ mod : \"distracted\", title : i18n(\"swadeMacro.attack.skillMod.distracted\"), abilitie : 0, value : currentActor.data.data.status.isDistracted ? -2 : 0});\r\n    skillModPool.push({ mod : \"vulnerable\", title : i18n(\"swadeMacro.attack.skillMod.vulnerable\" ), abilitie : 0, value : currentTarget.data.data.status.isVulnerable ? 2 : 0});\r\n    skillModPool.push({ mod : \"woundsFatigue\", title : i18n(\"swadeMacro.attack.skillMod.woundsFatigue\" ), abilitie : 0, value : currentActor.calcWoundFatigePenalties()});\r\n    skillModPool.push({ mod : \"sizeScale\", title : i18n(\"swadeMacro.attack.skillMod.sizeScale\"), abilitie : 0, value : (sizeScale[sizeScale.findIndex((el) => el.size == currentActor.data.data.stats.size)].mod * -1) + sizeScale[sizeScale.findIndex((el) => el.size == currentTarget.data.data.stats.size)].mod });\r\n    skillModPool.push({ mod : \"doubleTap\", title : i18n(\"swadeMacro.attack.skillMod.doubleTap\"), abilitie : 1, value : doubleTapEdge ? 1 : 0 });\r\n    skillModPool.push({ mod : \"threeRoundBurst\", title : i18n(\"swadeMacro.attack.skillMod.threeRoundBurst\"), abilitie : 1, value : threeRoundBurstAbility ? 1 : 0 });\r\n    if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\")) \r\n    { \r\n        skillModPool.push({ mod : \"minStrength\", title : i18n(\"swadeMacro.attack.skillMod.minStr\"), abilitie : 0, value : weapon.data.data.minStr == \"\" ? 0 : diceStep.indexOf(weapon.data.data.minStr) > diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides)) ? diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides)) - diceStep.indexOf(weapon.data.data.minStr) : 0});\r\n    }\r\n    skillModPool.push({ mod : \"otherMod\", title : i18n(\"swadeMacro.attack.skillMod.otherMods\"), abilitie : 0, value : html.find(\"#otherMod\")[0] === undefined ? 0 : parseInt(html.find(\"#otherMod\")[0].value) });\r\n\r\n    // Set Total modifications variable\r\n    let totalMod = 0;\r\n    skillModPool.forEach((el) =>  totalMod += el.value );\r\n\r\n    // Check if critical failure !\r\n    let criticalFailure = (diceResultPool.filter((el) => el.roll.total == 1).length > (diceResultPool.length / 2)) && (!currentActor.data.data.wildcard || diceResultPool.find((el) => el.type == \"wildRoll\" && el.roll.total == 1) !== undefined);\r\n    let successResultPool = [];\r\n\r\n    // Create roll result template\r\n    diceResultPool.forEach((el) => {\r\n        el.bgColor = (el.type == \"wildRoll\" ? \"background-color: rgb(255,215,0, 0.35);\" : el.roll.total > el.roll.parts[0].faces ? \"background-color : rgb(0, 200, 0, 0.35)\" : el.roll.total == 1 ? \"background-color : rgb(255, 0, 0, 0.35)\" : \"\");\r\n        \r\n        if (el.saved){\r\n            let result = (el.roll.total + totalMod) >= (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? 4 : parseInt(currentTarget.data.data.stats.parry.value)) + 4 ? { display : i18n(\"swadeMacro.commitAttackChat.raise\"), color : \"rgb(0, 0, 255, 0.35)\" } :\r\n            (el.roll.total + totalMod) >= (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? 4 : parseInt(currentTarget.data.data.stats.parry.value)) ? { display : i18n(\"swadeMacro.commitAttackChat.hit\"), color : \"rgb(0, 200, 0, 0.35)\" } : { display : i18n(\"swadeMacro.commitAttackChat.miss\"), color : \"rgb(255, 0, 0, 0.35)\" }\r\n            if (result.display != i18n(\"swadeMacro.commitAttackChat.miss\")) successResultPool.push(result.display);\r\n            result.total = (el.roll.total + totalMod);\r\n            el.display = result;\r\n        };\r\n    });\r\n    \r\n    if (isValidConditions) {\r\n\r\n        let chatMessage = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/chat-commit-attack.html\",{\r\n            weaponImg : weapon.data.img,\r\n            weaponName : weapon.data.name,\r\n            weaponNotes : weapon.data.data.notes,\r\n            targetName : currentTarget.data.name,\r\n            isRangeAttack : attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\"),\r\n            ammoUsed : ammoUsed,\r\n            bennieUsed : bennieUsed == undefined ? 0 : bennieUsed,\r\n            abilitites : skillModPool.filter((el) => el.abilitie == 1).map((el) => el.title).join(\", \"),\r\n            difficulty : attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") ? \"4\" : currentTarget.data.data.stats.parry.value,\r\n            modTitle : skillModPool.filter((el) => el.value != 0).map((el) => el.title + \" : \" + el.value).join(\"\\n\"),\r\n            modValue : totalMod,\r\n            isHit : successResultPool.length > 0 && !criticalFailure,\r\n            isCriticalFailure : criticalFailure,\r\n            isNotCriticalFailure : !criticalFailure,\r\n            diceResultPool : diceResultPool\r\n        });\r\n\r\n        // Apply bennie button and listener to chatTemplate if not critical failure\r\n        if (!criticalFailure) {\r\n            addEventListenerOnHtmlElement(\"#reRollButton\", 'click', (e) => { \r\n                e.target.style.display = \"none\"; \r\n                params.bennieUsed = true;\r\n                commitAttack(params);\r\n            }); \r\n        }\r\n        \r\n        // Apply damage button and listener to chatTemplate if 1+ success\r\n        if (successResultPool.length > 0) {\r\n            // Add event to chat message html element\r\n            addEventListenerOnHtmlElement(\"#callDamageButton\", 'click', (e) => { \r\n                damageSettings({weapon, successResultPool, attackSkillName, doubleTapEdge, threeRoundBurstAbility}, e.target);\r\n            }); \r\n        }\r\n\r\n        // Remove ammo from weapon\r\n        if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillShooting\") && trackAmmo) {\r\n            let newShots = (weapon.data.data.shots -= ammoUsed);\r\n            weapon.update({ \"data.shots\": newShots });\r\n        };\r\n\r\n        // Displat chat template\r\n        // Check can use \"So Nice Dices\" mod effects\r\n        game.dice3d === undefined ? printMessage(chatMessage) : game.dice3d.showForRoll(diceResultPool.map((el) => el.roll)).then(displayed => {\r\n            \r\n            printMessage(chatMessage);\r\n        });   \r\n    }\r\n}// end commitAttack\r\n\r\n// Calcul and display damages\r\nasync function damageResult(params)\r\n{\r\n    let weapon = params.weapon;\r\n    let successResultPool = params.successResultPool;\r\n    let attackSkillName = params.attackSkillName;\r\n    let bennieUsed = params.bennieUsed;\r\n    let html = params.html;\r\n    let doubleTapEdge = params.doubleTapEdge;\r\n    let threeRoundBurstAbility = params.threeRoundBurstAbility;\r\n\r\n    // SWADE rule, injury table page 95\r\n    let criticalInjury = [\r\n        { value : [ 2 ], injury : i18n(\"swadeMacro.damageResultChat.unmentionables\"), subInjury : undefined },\r\n        { value : [ 3, 4 ], injury : i18n(\"swadeMacro.damageResultChat.arm\"), subInjury : undefined },\r\n        { value : [ 5, 6, 7, 8, 9 ], injury : i18n(\"swadeMacro.damageResultChat.guts\"), subInjury : [\r\n            { value : [ 1, 2 ], injury : i18n(\"swadeMacro.damageResultChat.broken\") },\r\n            { value : [ 3, 4 ], injury : i18n(\"swadeMacro.damageResultChat.battered\") },\r\n            { value : [ 5, 6 ], injury : i18n(\"swadeMacro.damageResultChat.busted\") }\r\n        ]},\r\n        { value : [ 10, 11 ], injury : i18n(\"swadeMacro.damageResultChat.leg\"), subInjury : undefined },\r\n        { value : [ 12 ], injury : i18n(\"swadeMacro.damageResultChat.head\"), subInjury : [\r\n            { value : [ 1, 2, 3 ], injury : i18n(\"swadeMacro.damageResultChat.hideousScar\") },\r\n            { value : [ 4, 5 ], injury : i18n(\"swadeMacro.damageResultChat.blinded\") },\r\n            { value : [ 6 ], injury : i18n(\"swadeMacro.damageResultChat.brainDamage\") }\r\n        ]}\r\n    ];\r\n\r\n    let damageModPool = [];\r\n\r\n    // create a dice pool\r\n    let diceResultPool = [];\r\n\r\n    // get cover bonus\r\n    let coverBonus = html.find(\"#coverBonus\")[0] === undefined ? 0 : html.find(\"#coverBonus\")[0].value;\r\n\r\n    // get isGrettyDamage parameter\r\n    let isGrettyDamage = html.find(\"#isGrettyDamage\")[0] === undefined ? false : html.find(\"#isGrettyDamage\")[0].checked ? true : false;\r\n\r\n    // get ignore armor\r\n    let ignoreAmor = html.find(\"#ignoreArmor\")[0] === undefined ? false : html.find(\"#ignoreArmor\")[0].checked ? true : false;\r\n\r\n    // get damage modification\r\n    if (doubleTapEdge) damageModPool.push({ mod : \"doubleTap\", title : i18n(\"swadeMacro.damageResultChat.doubleTap\"), abilitie : 0, value : 1});\r\n    if (threeRoundBurstAbility) damageModPool.push({ mod : \"threeRoundBurst\", title : i18n(\"swadeMacro.damageResultChat.threeRoundBurst\"), abilitie : 0, value : 1});\r\n    damageModPool.push({ mod : \"otherMod\", title : i18n(\"swadeMacro.damageResultChat.otherMods\"), abilitie : 0, value : html.find(\"#damageMod\")[0] === undefined ? 0 : parseInt(html.find(\"#damageMod\")[0].value)});\r\n\r\n    // Set Total damage variables\r\n    let totalDamageMod = 0;\r\n    damageModPool.forEach((el) =>  totalDamageMod += el.value );\r\n\r\n    // Roll Dices\r\n    for (let i = 0; i < successResultPool.length; i++) {\r\n        \r\n        let weaponDamage = weapon.data.data.damage;\r\n\r\n        // Downgrade weapon damage for minStr restrcitions\r\n        if (attackSkillName == game.settings.get(\"swade-macros-simple\", \"skillFighting\") && weapon.data.data.minStr != \"\" && diceStep.indexOf(weapon.data.data.minStr) > diceStep.indexOf((\"d\" + currentActor.data.data.attributes.strength.die.sides))) \r\n        {\r\n            weaponDamage = \"@str+1d\" + currentActor.data.data.attributes.strength.die.sides + \" + \" + (currentActor.data.data.attributes.strength.die.modifier != \"0\" ? currentActor.data.data.attributes.strength.die.modifier : \"\");\r\n        }     \r\n\r\n        // Update @str from Strenght dice\r\n        let regexStr = /[@]str/g;\r\n        weaponDamage = weaponDamage.replace(regexStr, \"1d\" + currentActor.data.data.attributes.strength.die.sides)\r\n\r\n        // Add Raise\r\n        weaponDamage += (successResultPool[i] == i18n(\"swadeMacro.commitAttackChat.raise\") ? \" + 1d6\" : \"\")\r\n        weaponDamage += \" + \" + totalDamageMod;\r\n\r\n        // Explode all dices\r\n        let regexDiceExplode = /d[0-9]{1,2}/g;\r\n        weaponDamage = weaponDamage.replace(regexDiceExplode, \"$&x=\");\r\n\r\n        // Roll dices damages\r\n        diceResultPool.push({ type: \"damageRoll\", roll : new Roll(weaponDamage).roll(), raise : successResultPool[i] == i18n(\"swadeMacro.commitAttackChat.raise\") ? 1 : 0});\r\n    }\r\n\r\n    // Prepare template\r\n    //let displayRollResultTemplate = ``;\r\n    let targetShaken = currentTarget.data.data.status.isShaken;\r\n\r\n    // Get armor equipped\r\n    let armorToughness = 0;\r\n    if (!ignoreAmor) currentTarget.items.filter((el) => el.data.type == \"armor\" && el.data.data.equipped).forEach((el) => armorToughness += parseInt(el.data.data.armor));\r\n\r\n    // Create roll result template\r\n    diceResultPool.forEach((el) => {\r\n\r\n        el.rollBgColor = el.raise ? \"background-color: rgb(0, 200, 0, 0.35);\" : \"\";\r\n        el.rollTitle = el.roll.formula + \"\\n\" + el.roll.result;\r\n\r\n        // Calcul total toughness\r\n        let totalToughness = (parseInt(currentTarget.data.data.stats.toughness.value) \r\n                            + (parseInt(weapon.data.data.ap) > (parseInt(armorToughness) + parseInt(coverBonus)) ? 0 : (parseInt(armorToughness) + parseInt(coverBonus)) - parseInt(weapon.data.data.ap))\r\n                            + parseInt(currentTarget.data.data.stats.toughness.modifier));\r\n\r\n        el.toughness = totalToughness;\r\n        el.toughnessPassed = el.roll.total >= totalToughness;\r\n        el.toughnessNotPassed = !el.toughnessPassed;\r\n        \r\n        // Check if roll is better that toughness\r\n        if (el.roll.total >= totalToughness) {\r\n    \r\n            // Calcul wounds\r\n            let wounds = Math.floor(((el.roll.total - totalToughness) / 4)) + (targetShaken ? 1 : 0);\r\n\r\n            el.wounds = wounds;\r\n            el.isShaken = targetShaken;\r\n            el.isNotShaken = !targetShaken;\r\n            \r\n            el.wounded = wounds > 0;\r\n            if (wounds > 0)\r\n            {\r\n                el.woundRank = (totalToughness + (wounds * 4));\r\n                el.isGrettyDamage = isGrettyDamage && ((targetShaken && wounds > 1) || !targetShaken);\r\n\r\n                if (isGrettyDamage && ((targetShaken && wounds > 1) || !targetShaken)) {\r\n\r\n                    let roll1 =new Roll(\"2d6\").roll().total;\r\n                    let roll2 =new Roll(\"1d6\").roll().total;\r\n                    \r\n                    let injury = criticalInjury.find((el) => el.value.includes(roll1));\r\n                    let subInjury =  injury.subInjury != undefined ? injury.subInjury.find((el) => el.value.includes(roll2)) : undefined;\r\n\r\n                    el.grittyDamageTitle = roll1 + \" \" + (injury.subInjury != undefined ? \"-> \" + roll2 : \"\");\r\n                    el.grittyDamageValue = subInjury == undefined ? injury.injury : subInjury.injury;\r\n                }\r\n            }\r\n            \r\n            targetShaken = true;\r\n        }\r\n\r\n    });\r\n\r\n    let chatMessage = await renderTemplate(\"modules/swade-macros-simple/templates/macro-combat-flow/chat-damage-result.html\",{\r\n        weaponImg : weapon.data.img,\r\n        weaponName : weapon.data.name,\r\n        weaponAp : weapon.data.data.ap,\r\n        targetName : currentTarget.data.name,\r\n        toughnessValue : currentTarget.data.data.stats.toughness.value,\r\n        bennieUsed : bennieUsed == undefined ? 0 : bennieUsed,\r\n        armorTitle : \"armor : \" + armorToughness + \"\\n\" + \"cover : \" + coverBonus,\r\n        armorValue : armorToughness + parseInt(coverBonus),\r\n        damageModTitle : damageModPool.map((el) => el.title + \" : \" + el.value).join(\"\\n\"),\r\n        damageModValue : totalDamageMod,\r\n        diceResultPool : diceResultPool\r\n    });\r\n\r\n    // Add event to chat message html element\r\n    addEventListenerOnHtmlElement(\"#reRollButton\", 'click', (e) => { \r\n        e.target.style.display = \"none\"; \r\n        params.bennieUsed = true;\r\n        damageResult(params);\r\n    }); \r\n\r\n    // Displat chat template\r\n    // Check can use \"So Nice Dices\" mod effects\r\n    game.dice3d === undefined ? printMessage(chatMessage) : game.dice3d.showForRoll(diceResultPool.map((el) => el.roll)).then(displayed => {\r\n        printMessage(chatMessage);\r\n    });\r\n\r\n} // end damageCalculation","author":"BSvjXza0l57UiOE7","img":"icons/svg/combat.svg","actorIds":[],"_id":"NuOZixlKcn6pdYor"}
{"name":"Card Macro","permission":{"default":0,"GVM4OdXsYAEtxw6W":3},"type":"script","flags":{},"scope":"global","command":"getRequirements();\r\n\r\nfunction getRequirements() {\r\n  //How Many Cards to Draw\r\n  //Width/Height\r\n  //Which Table to Draw From\r\n  let cardsList = \"\";\r\n  Array.from(game.tables).map((el) => {\r\n    cardsList += `<option value=\"${el.data.name}\">${el.data.name}</option>`;\r\n  });\r\n\r\n  let template = `\r\n  <p>Table to Draw From: <select id=\"tableName\">${cardsList}</select></p>\r\n  <p>Number of Cards to Draw: <input id=\"drawAmt\" type=\"number\" style=\"width: 50px;\" value=1></p>\r\n  <p>\r\n    Height: <input id=\"height\" type=\"number\" style=\"width: 50px\" value=350>\r\n    Width: <input id=\"width\" type=\"number\" style=\"width: 50px\" value=250>\r\n  </p>\r\n  `;\r\n  new Dialog({\r\n    title: \"Draw Cards To Table\",\r\n    content: template,\r\n    buttons: {\r\n      ok: {\r\n        label: \"Draw\",\r\n        callback: async (html) => {\r\n          makeTiles(html);\r\n        },\r\n      },\r\n      cancel: {\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n  }).render(true);\r\n}\r\n\r\nasync function makeTiles(html) {\r\n  let tableName = html.find(\"#tableName\")[0].value;\r\n  let cardsToDraw = html.find(\"#drawAmt\")[0].value;\r\n  let _height = html.find(\"#height\")[0].value;\r\n  let _width = html.find(\"#width\")[0].value;\r\n\r\n  let cardDraws = (\r\n    await game.tables\r\n      .find((el) => el.data.name == tableName)\r\n      .drawMany(cardsToDraw)\r\n  ).results;\r\n\r\n  let centerX = game.scenes.active.data.width / 2;\r\n  let centerY = game.scenes.active.data.height / 2;\r\n\r\n  for (let i = 0; i < cardsToDraw; i++) {\r\n    await Tile.create({\r\n      img: cardDraws[i].img,\r\n      width: _width,\r\n      height: _height,\r\n      x: centerX,\r\n      y: centerY,\r\n    });\r\n  }\r\n}\r\n","author":"GVM4OdXsYAEtxw6W","img":"icons/svg/thrust.svg","actorIds":[],"_id":"ZQZRG4Ai3IYhDWmp"}
